/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   global.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: woopark <woopark@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/03/06 11:19:55 by woopark           #+#    #+#             */
/*   Updated: 2021/03/06 20:52:15 by woopark          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef GLOBAL_H
# define GLOBAL_H

# define N 4

//결과값이 저장될 보드
int g_board[N + 1][N + 1];
//위에서 봤을때 콤비네이션이 저장될 배열. [column][경우의 수][숫자의 갯수]
int	g_comb[N + 1][1000][N + 1];
//up과 down을 기준으로 걸러진 콤비네이션이 저장될 배열
int	g_comb_f[N + 1][1000][N + 1];
//위에서 봤을때 콤비네이션의 갯수 [column]
int	g_comb_len[N + 1];
//up과 down을 기준으로 걸러진 콤비네이션의 갯수 [column]
int	g_comb_len_f[N + 1];
//check_board를 계속해서 호출하기 위한 배열. 모든 경우의 수를 따지기 위한 배열. i속에 j속에 k속에... 를 생각하면 됨
int	g_comb_count[N + 1];
//유저 인풋이 저장될 배열
int g_view[N * 4];
//결과를 찾았는지가 저장되는 변수. 1이라면 결과를 찾은것이고 0이라면 찾지 못한 상태
int g_result;

#endif
